pipeline {
    agent any
    parameters {
        string(name: 'projectName', defaultValue: '', description: 'project name')
        string(name: 'project', defaultValue: '', description: 'project contest')
        string(name: 'URL_RECEPTION', defaultValue: '', description: 'URL_RECEPTION')
        string(name: 'DATABASE', defaultValue: '', description: 'DATABASE')
        string(name: 'DOCKER_PORT', defaultValue: '', description: 'DOCKER_PORT')
    }
    environment {
        PROJECTNAME = "${params.projectName}"
            PROJECT = "${params.project}"
            VOUMENPATH = "${home}/jenkins/jenkins_home/workspace/deployment_docker"
            URL_RECEPTION = "https://generateservice.lincetechnology.net"
            DATABASE = "${params.DATABASE}"
            DOCKER_PORT = "${params.DOCKER_PORT}"
            TOKEN_APP = "MIIBI2NjMyOTQ4NDY5"
    }

    stages {
        stage('Generate Service') {
            steps {
                echo "PROJECT:  ${env.PROJECTNAME}"
                echo "projectName:  ${env.PROJECTNAME}"
                echo "URL_RECEPTION:  ${env.URL_RECEPTION}"
                echo "DATABASE:  ${env.DATABASE}"
                sh "rm -rf *"
                sh "docker run --rm -v ${env.VOUMENPATH}:/app/data -e 'API_ENDPOINT_RECEPTION=${env.URL_RECEPTION}' -e 'TOKEN_APP=${env.TOKEN_APP}' -e 'PROJECT=${env.PROJECT}' lorenzolince/generate-devops "
            }
        }
        stage("Set env") {
            steps {
                script {
                    if (env.DATABASE == 'ORACLE') {
                        withCredentials([[$class: 'UsernamePasswordMultiBinding', credentialsId: 'db-credentials-dev', usernameVariable: 'USER_DB', passwordVariable: 'PASS_DB']]) {
                            dir("${env.PROJECTNAME}/") {
                                sh "pwd"
                                sh "ls -la "
                                sh "sed -i \"s/^GRAPHQL_SPQR_GUI_ENABLED=.*/GRAPHQL_SPQR_GUI_ENABLED=true/\" \".env\""
                                sh "sed -i \"s/^SWAGGER_UI=.*/SWAGGER_UI=true/\" \".env\""
                                sh "sed -i \"s/^DB_USER_NAME=.*/DB_USER_NAME=${USER_DB}/\" \".env\""
                                sh "sed -i \"s/^DB_PASSWORD=.*/DB_PASSWORD=${PASS_DB}/\" \".env\""
                                sh "sed -i \"s|^VALID_LICENSE=.*|VALID_LICENSE='${env.TOKEN_APP}'|\" .env"
                                sh "sed -i '0,/- \"8080:/{s/- \"8080:/- \"${env.DOCKER_PORT}:/}' docker-compose.yml"
                            }
                        }
                    } else {
                        withCredentials([[$class: 'UsernamePasswordMultiBinding', credentialsId: 'db-credential-sqlserver', usernameVariable: 'USER_DB', passwordVariable: 'PASS_DB']]) {
                            dir("${env.PROJECTNAME}/") {
                                sh "pwd"
                                sh "ls -la "
                                sh "sed -i \"s/^GRAPHQL_SPQR_GUI_ENABLED=.*/GRAPHQL_SPQR_GUI_ENABLED=true/\" \".env\""
                                sh "sed -i \"s/^SWAGGER_UI=.*/SWAGGER_UI=true/\" \".env\""
                                sh "sed -i \"s/^DB_USER_NAME=.*/DB_USER_NAME=${USER_DB}/\" \".env\""
                                sh "sed -i \"s/^DB_PASSWORD=.*/DB_PASSWORD=${PASS_DB}/\" \".env\""
                                sh "sed -i \"s|^VALID_LICENSE=.*|VALID_LICENSE='${env.TOKEN_APP}'|\" .env"
                                sh "sed -i '0,/- \"8080:/{s/- \"8080:/- \"${env.DOCKER_PORT}:/}' docker-compose.yml"
                            }
                        }
                    }
                }
            }
        }
        stage('Docker Build') {
            steps {
                dir("${env.PROJECTNAME}/") {
                    sh "ls -l"
                    sh "chmod 755 dockerBuild.sh "
                    sh "./dockerBuild.sh "
                }
            }
        }
        stage('Docker run') {
            steps {
                dir("${env.PROJECTNAME}/") {
                    sh "ls -l"
                    sh "echo \"------ Docker run -------- \" "
                    sh "chmod 755 runDocker.sh "
                    sh "./runDocker.sh "
                }
            }
        }
    }
}
